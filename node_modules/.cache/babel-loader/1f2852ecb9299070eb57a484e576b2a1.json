{"remainingRequest":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/babel-loader/lib/index.js!/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/morganhartman/CS 260/lab-5-littlemisshartman/src/components/Comments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/src/components/Comments.vue","mtime":1555086129270},{"path":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Date$now from \"/Users/morganhartman/CS 260/lab-5-littlemisshartman/node_modules/@babel/runtime-corejs2/core-js/date/now\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nexport default {\n  name: 'Comments',\n  props: ['comments', 'photo'],\n  data: function data() {\n    return {\n      newComment: \"\",\n      error: \"\"\n    };\n  },\n  methods: {\n    formatDate: function formatDate(date) {\n      if (moment(date).diff(_Date$now(), 'days') < 15) return moment(date).fromNow();else return moment(date).format('d MMMM YYYY');\n    },\n    addComment: function () {\n      var _addComment = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (!(this.user && this.photo)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                if (!this.newComment) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 5;\n                return this.$store.dispatch(\"addComment\", {\n                  user: this.user,\n                  photo: this.photo,\n                  text: this.newComment\n                });\n\n              case 5:\n                this.error = _context.sent;\n                if (this.error === \"\") this.$router.push('mypage');\n\n              case 7:\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n\n      function addComment() {\n        return _addComment.apply(this, arguments);\n      }\n\n      return addComment;\n    }()\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.$store.dispatch(\"getMyComments\", this.photo._id);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  computed: {\n    user: function user() {\n      return this.$store.state.user;\n    }\n  }\n};",{"version":3,"sources":["Comments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAkBA,OAAA,MAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,KAAA,EAAA,CACA,UADA,EAEA,OAFA,CAFA;AAMA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GAXA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,IADA,EACA;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,WAAA,EAAA,MAAA,IAAA,EAAA,EACA,OAAA,MAAA,CAAA,IAAA,CAAA,CAAA,OAAA,EAAA,CADA,KAGA,OAAA,MAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,aAAA,CAAA;AACA,KANA;AAOA,IAAA,UAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBASA,KAAA,IAAA,IAAA,KAAA,KATA;AAAA;AAAA;AAAA;;AAAA,qBAUA,KAAA,UAVA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWA,KAAA,MAAA,CAAA,QAAA,CAAA,YAAA,EAAA;AACA,kBAAA,IAAA,EAAA,KAAA,IADA;AAEA,kBAAA,KAAA,EAAA,KAAA,KAFA;AAGA,kBAAA,IAAA,EAAA,KAAA;AAHA,iBAAA,CAXA;;AAAA;AAWA,qBAAA,KAXA;AAgBA,oBAAA,KAAA,KAAA,KAAA,EAAA,EACA,KAAA,OAAA,CAAA,IAAA,CAAA,QAAA;;AAjBA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBA,gBAAA,OAAA,CAAA,GAAA;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAZA;AAqCA,EAAA,OArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAsCA,KAAA,MAAA,CAAA,QAAA,CAAA,eAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAtCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwCA,EAAA,QAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA;AACA;AAHA;AAxCA,CAAA","sourcesContent":["<template>\n<div>\n    <div class=\"image\" v-for=\"comment in comments\" v-bind:key=\"comment._id\">\n        <p class=\"commentText\">{{ comment.text }}</p>\n        <p class=\"photoDate\">\n        <span v-if=\"comment.user.name\">{{comment.user.name}}, </span>\n        {{formatDate(comment.created)}}\n        </p>\n    </div>\n    <form v-if=\"user\" @submit.prevent=\"addComment\">\n            <input v-model=\"newComment\" placeholder=\"Comment\">\n            <p></p>\n            <button type=\"submit\" class=\"pure-button pure-button-secondary\">Submit</button>\n    </form>\n</div>\n</template>\n\n<script>\nimport moment from 'moment';\n\nexport default {\n    name: 'Comments',\n    props: [\n        'comments',\n        'photo',\n    ],\n    data: function  () {\n        return {\n            newComment: \"\",\n            error: \"\"\n        }\n    },\n    methods: {\n        formatDate(date) {\n            if (moment(date).diff(Date.now(), 'days') < 15)\n                return moment(date).fromNow();\n            else\n                return moment(date).format('d MMMM YYYY');\n        },\n        async addComment() {\n            try {\n                if (this.user && this.photo) {\n                    if (this.newComment) {\n                        this.error = await this.$store.dispatch(\"addComment\", {\n                            user: this.user,\n                            photo: this.photo,\n                            text: this.newComment\n                        });\n                        if (this.error === \"\")\n                        this.$router.push('mypage');\n                    }\n                }\n            } catch (error) {\n                console.log(error);\n            } \n        }\n    },\n    async created () {\n        await this.$store.dispatch(\"getMyComments\", this.photo._id);\n    },\n    computed: {\n        user() {\n            return this.$store.state.user;\n        },\n    }\n}\n</script>\n\n<style scoped>\n.photoTitle {\n  margin: 0px;\n  font-size: 1.2em;\n}\n\n.photoDate {\n  margin: 0px;\n  font-size: 0.9em;\n  font-weight: normal;\n}\n\np {\n  margin: 0px;\n}\n\n.image {\n  margin: 0 0 1.5em;\n  display: inline-block;\n  width: 100%;\n}\n\n.image img {\n  max-width: 600px;\n  max-height: 600px;\n  image-orientation: from-image;\n}\n</style>"],"sourceRoot":"src/components"}]}